{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,UAClCC,OAAQF,SAASC,cAAc,SAC/BE,SAAUH,SAASC,cAAc,0BACjCG,QAASJ,SAASC,cAAc,yBAChCI,OAAQL,SAASC,cAAc,yBA2BjC,SAASK,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MAjCPV,EAAKI,OAAOa,iBAAiB,UAE7B,SAAsBC,GACpBA,EAAMC,iBAKN,IAJA,IAAIC,EAAcC,OAAOrB,EAAKK,SAASiB,OACnCC,EAAaF,OAAOrB,EAAKM,QAAQgB,OACjCE,EAAYH,OAAOrB,EAAKO,OAAOe,OAE1BG,EAAe,EAAGA,GAAgBL,EAAaK,GAAgB,EACtEjB,EAAciB,EAAcF,GACzBG,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAGjDsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA9B,GAAS+B,OAAOI,QACd,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,UAGjDa,GAAcC,K","sources":["src/js/03-promises.js"],"sourcesContent":["// import { fromPairs, reject } from 'lodash';\nimport Notiflix from 'notiflix';\n\nconst refs = {\n  buttontEl: document.querySelector('button'),\n  formEl: document.querySelector('.form'),\n  amountEl: document.querySelector('input[name = \"amount\"]'),\n  delayEl: document.querySelector('input[name = \"delay\"]'),\n  stepEl: document.querySelector('input[name = \"step\"]'),\n};\n\nrefs.formEl.addEventListener('submit', onFormSubmit);\n//\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  let amountValue = Number(refs.amountEl.value);\n  let delayValue = Number(refs.delayEl.value);\n  let stepValue = Number(refs.stepEl.value);\n\n  for (let amountNumber = 1; amountNumber <= amountValue; amountNumber += 1) {\n    createPromise(amountNumber, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delayValue += stepValue;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","buttontEl","document","querySelector","formEl","amountEl","delayEl","stepEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","amountValue","Number","value","delayValue","stepValue","amountNumber","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.c3fef690.js.map"}